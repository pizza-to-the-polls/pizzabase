service: pizzabase

frameworkVersion: "1"

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-west-2
  environment:
    SS_AUTH_ID: ${env:SS_AUTH_ID}
    SS_AUTH_TOKEN: ${env:SS_AUTH_TOKEN}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "secretsmanager:GetSecretValue"
        - "secretsmanager:PutResourcePolicy"
        - "secretsmanager:PutSecretValue",
        - "secretsmanager:DeleteSecret"
        - "secretsmanager:DescribeSecret"
        - "secretsmanager:TagResource"
      Resource:
        - "arn:aws:secretsmanager:*:*:secret:PizzaBase*"
    - Effect: "Allow"
      Action:
        - "secretsmanager:CreateSecret"
        - "secretsmanager:ListSecrets"
        - "secretsmanager:GetRandomPassword"
        - "tag:GetResources"
        - "rds-data:BatchExecuteStatement"
        - "rds-data:BeginTransaction"
        - "rds-data:CommitTransaction"
        - "rds-data:ExecuteStatement"
        - "rds-data:RollbackTransaction"
      Resource: 
        - "*"

package:
  include:
    - ormconfig.json

functions:
  app:
    handler: handler.handler
    events:
      - http: ANY /
      - http: "ANY {proxy+}"

custom:
  customDomain:
    domainName: base.polls.pizza
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# iamRoleStatements:
#   - Effect: "Allow"
#     Action:
#       - "s3:ListBucket"
#     Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#   - Effect: "Allow"
#     Action:
#       - "s3:PutObject"
#     Resource:
#       Fn::Join:
#         - ""
#         - - "arn:aws:s3:::"
#           - "Ref" : "ServerlessDeploymentBucket"
#           - "/*"

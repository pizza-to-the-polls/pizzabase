name: Test

on:
  push:
    branches-ignore: [master]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v1.4.3
        with:
          node-version: 12

      - name: npm install dependencies
        run: npm install

      - name: run prettier
        run: npm run prettier

      - name: run tslint
        run: npm run lint

      - name: run tests
        run: npm run test
        env:
          SS_AUTH_ID: ${{ secrets.SS_AUTH_ID }}
          SS_AUTH_TOKEN: ${{ secrets.SS_AUTH_TOKEN }}
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USERNAME: postgres

  build:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    needs: test

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v1.4.3
        with:
          node-version: 12

      - name: npm install dependencies
        run: npm install

      - name: create ormconfig.json
        run: echo $ORMCONFIG_JSON > $GITHUB_WORKSPACE/ormconfig.json
        env:
          ORMCONFIG_JSON: ${{ secrets.STAGING_ORMCONFIG_JSON }}

      - name: deploy to aws
        uses: serverless/github-action@v1.53.0
        with:
          args: deploy --stage dev
        env:
          SS_AUTH_ID: ${{ secrets.SS_AUTH_ID }}
          SS_AUTH_TOKEN: ${{ secrets.SS_AUTH_TOKEN }}
          GOOGLE_MAPS_KEY: ${{ secrets.GOOGLE_MAPS_KEY }}
          ALLOWED_ORIGINS: 'polls.pizza,localhost'
          STATIC_SITE: https://next.polls.pizza
          ZAP_NEW_REPORT: ${{ secrets.STAGING_ZAP_ALL }}
          ZAP_NEW_LOCATION: ${{ secrets.STAGING_ZAP_ALL }}
          ZAP_NEW_ORDER: ${{ secrets.STAGING_ZAP_ALL }}
          ZAP_NEW_UPLOAD: ${{ secrets.STAGING_ZAP_ALL }}
          ZAP_NEW_TRUCK: ${{ secrets.STAGING_ZAP_ALL }}
          ZAP_SKIP_REPORT: ${{ secrets.STAGING_ZAP_ALL }}
          ZAP_TRUCK_REPORT: ${{ secrets.STAGING_ZAP_ALL }}
          ZAP_ORDER_REPORT: ${{ secrets.STAGING_ZAP_ALL }}
          BUGSNAG_KEY: ${{ secrets.BUGSNAG_KEY }}
          BUGSNAG_ENV: 'dev'
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_KEY }}
          STRIPE_PRODUCT_ID: ${{ secrets.STAGING_STRIPE_PRODUCT_ID  }}

      - name: sync schema
        run: npm run schema:sync
